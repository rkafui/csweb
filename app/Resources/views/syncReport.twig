<!DOCTYPE html>
<!-- saved from url=(0014)about:internet -->
<html lang="en">

    <head>

        <meta charset="utf-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <meta name="description" content="">
        <meta name="author" content="">

        <link rel='icon' href={{asset('dist/img/favicon.ico')}} type='image/x-icon'/>

        <title>CSWeb</title>

        <!-- Bootstrap Core CSS -->
        <link href={{asset('bower_components/bootstrap/dist/css/bootstrap.min.css')}} rel="stylesheet">

        <!-- MetisMenu CSS -->
        <link href={{asset('bower_components/metisMenu/dist/metisMenu.min.css')}} rel="stylesheet">

        <!-- DataTables CSS -->
        <link href={{asset('bower_components/datatables-plugins/integration/bootstrap/3/dataTables.bootstrap.css')}} rel="stylesheet">

        <!-- Custom CSS -->
        <link href={{asset('dist/css/sb-admin-2.css')}} rel="stylesheet">

        <!-- Custom Fonts -->
        <link href={{asset('bower_components/font-awesome/css/font-awesome.min.css')}} rel="stylesheet" type="text/css">

        <!-- ALW - Custom CSS -->
        <link href={{asset('dist/css/cspro-styles.css')}} rel="stylesheet">

        <!-- DataTables -->
        <link href={{asset('bower_components/datatables/media/css/jquery.dataTables.min.css')}}>

        <!-- HTML5 Shim and Respond.js IE8 support of HTML5 elements and media queries -->
        <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
        <!--[if lt IE 9]>
            <script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"></script>
            <script src="https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js"></script>
        <![endif]-->

    </head>

    <body>

        <div id="wrapper">
            <!-- Navigation -->
            <nav class="navbar navbar-default navbar-static-top navbar-cspro" role="navigation" style="margin-bottom: 0">
                <div class="navbar-header">
                    <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
                        <span class="sr-only">Toggle navigation</span>
                        <span class="icon-bar"></span>
                        <span class="icon-bar"></span>
                        <span class="icon-bar"></span>
                    </button>
                    <a class="navbar-brand" href="{{ path('dashboard') }}">
                        <img alt="Brand" src={{asset('dist/img/logo.png')}}>
                    </a>
                    <p class="title-text-cspro">CSWeb</p>
                    <p class="version-text-cspro">{{ csproVersion }}</p>
                </div>
                <!-- /.navbar-header -->
                {% set userinfo = app.request.cookies.has('username') ? app.request.cookies.get('username') : null %}
                {% set accessToken = app.request.cookies.has('access_token') ? app.request.cookies.get('access_token') : null %}
                <ul class="nav navbar-top-links navbar-right cspro">
                    <li class="nav-text-cspro nav-li-a-placeholder-cspro">
                        {{ userinfo }}
                    </li>
                    <li>
                        <a href="{{ path('logout') }}" class="nav-text-cspro"><i class="fa fa-sign-out fa-fw"></i> Logout</a>
                    </li>
                </ul>

                <div class="navbar-default sidebar" role="navigation">
                    <div class="sidebar-nav navbar-collapse">
                        <ul class="nav" id="side-menu">
                            {% if is_granted('ROLE_DATA_ALL') == true %}
                                <li>
                                    <a href="{{ path('dashboard') }}"><i class="fa fa-database fa-fw"></i> Data</a>
                                </li>
                            {% endif %}
                            {% if is_granted('ROLE_REPORTS_ALL') == true %}
                                <li>
                                    <a href="{{ path('sync-report') }}"><i class="fa fa-table fa-fw"></i> Sync Report<span
                                            class="fa arrow"></span></a>
                                    <ul id="sync-report-dictionaries" class="nav nav-second-level">
                                    </ul>
                                </li>
                            {% endif %}
                            {% if is_granted('ROLE_APPS_ALL') == true %}
                                <li>
                                    <a href="{{ path('apps') }}"><i class="fa fa-desktop fa-fw"></i> Apps</a>
                                </li>
                            {% endif %}
                            {% if is_granted('ROLE_USERS_ALL') == true %}
                                <li>
                                    <a href="{{ path('users') }}"><i class="fa fa-users fa-fw"></i> Users</a>
                                </li>
                            {% endif %}
                            {% if is_granted('ROLE_ROLES_ALL') == true %}
                                <li>
                                    <a href="{{ path('roles') }}"><i class="fa fa-user fa-fw"></i> Roles</a>
                                </li>
                            {% endif %}
                            {% if is_granted('ROLE_SETTINGS_ALL') == true %}
                                <li>
                                    <a href="#"><i class="fa fa-cog fa-fw"></i> Settings<span
                                            class="fa arrow"></span></a>
                                    <ul class="nav nav-second-level">
                                        <li>
                                            <a href="{{ path('dataSettings') }}"><i class="fa fa-database fa-fw"></i> Data</a>
                                        </li>
                                    </ul>
                                </li> 
                            {% endif %}
                        </ul>
                    </div>
                    <!-- /.sidebar-collapse -->
                </div>
                <!-- /.navbar-static-side -->
            </nav>

            <!-- Import progress modal -->
            <div id="main-progress-modal" class="modal" data-keyboard="false" data-backdrop="static">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header"><h4>Processing....</h4>
                            <div class="progress">
                                <div style="width:0%" class="progress-bar progress-bar-striped progress-bar-animated" 
                                     role="progressbar" aria-valuemin="0" aria-valuemax="100" aria-valuenow="2">
                                    <div class="progressText">0% Complete</div>
                                </div>
                            </div>
                            <!-- /.progress -->
                        </div>
                        <!-- /.modal-header -->
                    </div>
                    <!-- /.modal-content -->
                </div>
                <!-- /.modal-dialog -->
            </div>
            <!-- /.main-progress-modal -->

            <!-- Page Content -->
            <div id="page-wrapper">
                <div class="row">
                    <div class="col-xs-12">
                        <div id="alert" class="alert-placeholder-cspro alert-margin-cspro"></div>
                        <!-- /.alert -->
                    </div>
                    <!-- /.col-xs-12 -->
                </div>
                <!-- /.row -->
                <div class="row">
                    <div class="col-xs-12">
                        <div class="panel panel-default">
                            <div class="panel-heading">
                                <div class="btn-toolbar">
                                    <i class="fa fa-table fa-fw"></i> Sync Report <div id="dictionary-id-dropdown-container" class="pull-right"></div>
                                </div>
                            </div>
                            <!-- /.panel-heading -->
                            <div class="panel-body">
                                <div id="store-area-names-column-count" class="table-responsive" data-area-names-column-count="0">
                                    <table id="table-responsive" class="table table-striped table-bordered table-hover" style="width:100%">
                                    </table>
                                </div>
                                <!-- /.table-responsive -->
                            </div>
                            <!-- /.panel-body -->
                        </div>
                        <!-- /.panel -->
                    </div>
                    <!-- /.col-xs-12 -->
                </div>
                <!-- /.row -->
            </div>
            <!-- /#page-wrapper -->

        </div>
        <!-- /#wrapper -->

        <!-- jQuery -->
        <script src={{asset('bower_components/jquery/dist/jquery.min.js')}}></script>

        <!-- Bootstrap Core JavaScript -->
        <script src={{asset('bower_components/bootstrap/dist/js/bootstrap.min.js')}}></script>

        <!-- Metis Menu Plugin JavaScript -->
        <script src={{asset('bower_components/metisMenu/dist/metisMenu.min.js')}}></script>

        <!-- DataTables JavaScript -->
        <script src={{asset('bower_components/datatables/media/js/jquery.dataTables.min.js')}}></script>
        <script src={{asset('bower_components/datatables-plugins/integration/bootstrap/3/dataTables.bootstrap.min.js')}}></script>

        <!-- Custom Theme JavaScript -->
        <script src={{asset('dist/js/sb-admin-2.js')}}></script>

        <!-- Bootstrap Validator -->
        <script src={{asset('bower_components/bootstrap-validator/dist/validator.min.js')}}></script>

        <!-- Page-Level Scripts -->
        <script>
            "use strict";

            $(document).ready(function () {

                var dictionaryDropdown = document.getElementById('dictionary-id-dropdown-container');
                dictionaryDropdown.addEventListener('change', function () {
                    dataTables.initSyncReport();
                });

                chain.updateSyncReportAfterPageReload();
                /*
                 // Data tables
                 $('[data-toggle="popover"]').popover();
                 $.fn.dataTable.ext.errMode = 'none'; //user custom error processing for the datatable to handle redirects
                 
                 var syncTable = $('#table-responsive')
                 .on('xhr.dt', function ( e, settings, json, xhr ) {
                 if (xhr.status === 401 || xhr.status === 405) {
                 window.location.href = "{{ path('logout') }}";
                 }
                 // Note no return - manipulate the data directly in the JSON object.
                 } )
                 .on( 'error.dt', function ( e, settings, techNote, message ) {
                 console.log( 'An error has been reported by DataTables: ', message );
                 } )
                 .DataTable({
                 "dom": 'lrtip',
                 "processing": true,
                 "searching": true,
                 "paging": true,
                 "order": [[0, "asc"]],
                 "columnDefs": [
                 {"name": "region", "orderable": true, "searchable": true, "targets": 0},
                 {"name": "district", "orderable": true, "searchable": true, "targets": 1},
                 {"name": "state", "orderable": true, "searchable": true, "targets": 2},
                 {"name": "synchronized", "orderable": true, "searchable": true, "targets": 3},
                 ],
                 "ajax": "{{ url('syncReportJson') }}",
                 "serverSide": true,
                 "columns": [
                 {"data": "id_REGION_CODE"},
                 {"data": "id_DIVISION_CODE"},
                 {"data": "id_STATE_CODE"},
                 {"data": "total_count"},
                 ],
                 // ALW - TODO: Comment out column filters
                 initComplete: function () {
                 this.api().columns().every( function () {
                 var column = this;
                 var select = $('<select><option value=""></option></select>')
                 .appendTo( $(column.footer()).empty() )
                 .on( 'change', function () {
                 var val = $.fn.dataTable.util.escapeRegex(
                 $(this).val()
                 );
                 
                 column
                 .search( val, false, false )
                 .draw();
                 } );
                 
                 column.data().unique().sort().each( function ( d, j ) {
                 select.append( '<option value="'+d+'">'+d+'</option>' )
                 } );
                 } );
                 },
                 }); // Data tables
                 */
            }); // $(document).ready

            var chain =
                    {
                        updateSyncReportAfterPageReload: function () {
                            // Chain Ajax calls (getAreaNamesColumnCount, getDictionaries, getDictionaryIds, initSyncReport)
                            $("body").addClass("loading");
                            var gettingAreaNamesColumnCount = db.getAreaNamesColumnCount();
                            db.getDictionaries().then(function (response) {
                                // Done getDictionaries
                                return $.when(gettingAreaNamesColumnCount, db.getDictionaryIds());
                            }, function () {
                                // Fail getDictionaries
                            }).then(function () {
                                // Done getAreaNamesColumnCount + getDictionaryIds
                                $("body").removeClass("loading");
                                dataTables.initSyncReport();
                            }, function () {
                                // Fail getAreaNamesColumnCount + getDictionaryIds
                                $("body").removeClass("loading");
                            });
                        },

                        updateSyncReportAfterChangeDictionaries: function () {
                            // Chain Ajax calls (getDictionaryIds, initSyncReport)
                            $("body").addClass("loading");
                            db.getDictionaryIds().then(function () {
                                // Done getDictionaryIds
                                $("body").removeClass("loading");
                                dataTables.initSyncReport();
                            }, function () {
                                // Fail getDictionaryIds
                                $("body").removeClass("loading");
                            });
                        }
                    }

            var db =
                    {
                        getAreaNamesColumnCount: function () {
                            // Get column count for cspro_area_names table
                            return $.ajax({
                                type: "GET",
                                url: "{{ url('report-area-names-column-count-json') }}",
                                dataType: "json"
                            }).then(function (response) {
                                // Done getAreaNamesColumnCount
                                if (response.type === "error") {
                                    // Only invalid responses will have a type
                                    ui.showAlert(response.message, "alert alert-danger");
                                    //if (response.status === 401) {
                                    //    window.location.href = "{{ path('logout') }}";
                                    //}
                                    //else {
                                    // Convert success to failure
                                    return $.Deferred().reject(response).promise();
                                    //}
                                } else {
                                    // Update data attribute w/ column count
                                    var areaNamesColumnCount = document.getElementById('store-area-names-column-count');
                                    areaNamesColumnCount.dataset.areaNamesColumnCount = response;
                                }
                            }, function (response) {
                                // Fail getAreaNamesColumnCount
                                if (response.status === 200) {
                                    // TODO: Hack to catch expired token
                                    window.location.href = "{{ path('logout') }}";
                                } else {
                                    ui.showAlert(response.message, "alert alert-danger");
                                }
                            });
                        },

                        getDictionaries: function () {
                            // Get all dictionary names and labels
                            return $.ajax({
                                type: "GET",
                                url: "{{ url('report-dictionaries-json') }}",
                                dataType: "json"
                            }).then(function (response) {
                                // Done getDictionaries
                                if (response.type === "error") {
                                    // Only invalid responses will have a type
                                    ui.showAlert(response.message, "alert alert-danger");
                                    //if (response.status === 401) {
                                    //    window.location.href = "{{ path('logout') }}";
                                    //}
                                    //else {
                                    // Convert success to failure
                                    return $.Deferred().reject(response).promise();
                                    //}
                                } else {
                                    if (response.length > 0) {
                                        ui.buildDictionaryList(response, "sync-report-dictionaries");
                                        return response;
                                    } else {
                                        ui.showAlert("To view report(s) add a dictionary to the data dashboard and upload data", "alert alert-danger");
                                        // Convert success to failure
                                        return $.Deferred().reject(response).promise();
                                    }
                                }
                            }, function (response) {
                                // Fail getDictionaries
                                if (response.status === 200) {
                                    // TODO: Hack to catch expired token
                                    window.location.href = "{{ path('logout') }}";
                                } else {
                                    ui.showAlert(response.message, "alert alert-danger");
                                }
                            });
                        },

                        getDictionaryIds: function () {
                            // Get id items from dictionary (eventual columns for DataTables)
                            var selectedDictionary = ui.getSelectedDictionary();

                            return $.ajax({
                                type: "GET",
                                url: "{{ url('report-dictionary-ids-json') }}",
                                dataType: "json",
                                data: {
                                    dictionary: selectedDictionary
                                }
                            }).then(function (response) {
                                // Done getDictionaryIds
                                if (response.type === "error") {
                                    // Only invalid responses will have a type
                                    ui.showAlert(response.message, "alert alert-danger");
                                    //if (response.status === 401) {
                                    //    window.location.href = "{{ path('logout') }}";
                                    //}
                                    //else {
                                    // Convert success to failure
                                    return $.Deferred().reject(response).promise();
                                    //}
                                } else {
                                    ui.buildDictionaryIdDropdown(response, "dictionary-id-dropdown-container");
                                }
                            }, function (response) {
                                // Fail getDictionaryIds
                                if (response.status === 200) {
                                    // TODO: Hack to catch expired token
                                    window.location.href = "{{ path('logout') }}";
                                } else {
                                    ui.showAlert(response.message, "alert alert-danger");
                                }
                            });
                        }
                    }

            var ui =
                    {
                        buildDictionaryList: function (dictionaryObjects, containerId)
                        {
                            var container = document.getElementById(containerId);

                            while (container.firstChild) {
                                // Remove a previous dictionary list or message
                                container.removeChild(container.firstChild);
                            }

                            var dictionaryList = document.createElement("ul");
                            dictionaryList.setAttribute("id", "dictionary-list");

                            Array.prototype.forEach.call(dictionaryObjects, function (el, i) {
                                var listItem = document.createElement("li");
                                listItem.setAttribute("id", el.dictionary_name);
                                if (i === 0) {
                                    // Default first dictionary in list as selected
                                    listItem.setAttribute("class", "selected");
                                }
                                var anchor = document.createElement("a");
                                anchor.innerHTML = el.dictionary_label;
                                var callback = "ui.changeDictionary('" + listItem.id + "')";
                                anchor.setAttribute("onclick", callback);

                                listItem.appendChild(anchor);
                                dictionaryList.appendChild(listItem);
                            });

                            container.appendChild(dictionaryList);
                        },

                        getSelectedDictionary: function ()
                        {
                            // Return selected dictionary from list
                            var lis = document.getElementById("dictionary-list").getElementsByTagName("li");

                            for (var i = 0; i < lis.length; i++) {
                                if (lis[i].className === "selected") {
                                    return lis[i].id;
                                }
                            }
                        },

                        buildDictionaryIdDropdown: function (dictionaryIdObjects, containerId)
                        {
                            var container = document.getElementById(containerId);

                            while (container.firstChild) {
                                // Remove a previous dictionary id list
                                container.removeChild(container.firstChild);
                            }

                            var dictionaryIdList = document.createElement("select");
                            dictionaryIdList.setAttribute("id", "dictionary-id-dropdown");

                            // Loop through each dictionary id object and append the option to the dictionary-id-dropdown
                            Array.prototype.forEach.call(dictionaryIdObjects, function (el, i) {
                                var option = document.createElement("option");
                                option.text = ui.prettifyDictionaryName(el);
                                option.value = el;

                                dictionaryIdList.appendChild(option);
                            });

                            container.appendChild(dictionaryIdList);
                        },

                        getSelectedDictionaryIds: function (prettify)
                        {
                            // Get dictionary ids from dropdown selection. If ids are id_1, id_2,
                            // id_3 and id_2 is selected then an array of id_1 and id_2 are returned.
                            var element = document.getElementById("dictionary-id-dropdown");
                            var currentSelection = element.options[element.selectedIndex].value;
                            var ids = [];

                            for (var i = 0; i < element.options.length; i++) {
                                if (prettify)
                                    ids[i] = element.options[i].text;
                                else
                                    ids[i] = element.options[i].value;

                                if (currentSelection === element.options[i].value)
                                    break;
                            }

                            return ids;
                        },

                        changeDictionary: function (selectedId) {
                            // Loop through dictionaries in list and update which is selected
                            var lis = document.getElementById("dictionary-list").getElementsByTagName("li");
                            for (var i = 0; i < lis.length; i++) {
                                if (lis[i].className === "selected") {
                                    // Remove class selected from previously selected dictionary
                                    lis[i].classList.remove("selected");
                                }

                                if (lis[i].id === selectedId) {
                                    // Add class selected to currently selected dictionary
                                    lis[i].setAttribute("class", "selected");
                                }
                            }

                            chain.updateSyncReportAfterChangeDictionaries();
                        },

                        attachFooterHeader: function (columnCount, containerId) {
                            // Add footer header, so column filter can be attached
                            var container = document.getElementById(containerId);

                            while (container.firstChild) {
                                // Remove a previous footer
                                container.removeChild(container.firstChild);
                            }

                            var footer = document.createElement("tfoot");
                            var tableRow = document.createElement("tr");
                            footer.appendChild(tableRow);

                            // Loop through each column and append a table header to the table row
                            for (var i = 0; i < columnCount; i++) {
                                var tableHeader = document.createElement("th");
                                //var t = document.createTextNode("th" + i);
                                //tableHeader.appendChild(t);

                                tableRow.appendChild(tableHeader);
                            }

                            container.appendChild(footer);
                        },

                        prettifyDictionaryName: function (dictionaryName) {
                            // Remove ID
                            //dictionaryName = dictionaryName.substr(2);
                            // Replace underscores with spaces
                            //dictionaryName = dictionaryName.replace(/_/g, ' ');
                            return dictionaryName;
                        },

                        showAlert: function (message, alertStyle) {
                            $("#alert").replaceWith("<div id='alert' class='" + alertStyle + " alert-margin-cspro'>" + message + "</div>");
                            $("#alert").show();
                        },

                        clearAlert: function () {
                            $("#alert").replaceWith("<div id='alert' class='alert-placeholder-cspro alert-margin-cspro'></div>");
                            $("#alert").show();
                        },

                        showImportAlert: function (message, alertStyle) {
                            $("#import-modal-alert").replaceWith("<div id='import-modal-alert' class='" + alertStyle + " alert-margin-cspro'>" + message + "</div>");
                            $("#import-modal-alert").show();
                        }
                    }

            var dataTables =
                    {
                        initSyncReport: function () {
                            $.fn.dataTable.ext.errMode = 'none';

                            if ($.fn.dataTable.isDataTable('#table-responsive')) {
                                // DataTable exists and number of columns may have changed
                                $('#table-responsive').DataTable().destroy();  // Destroy table
                                $('#table-responsive').empty();                // Remove all <thead>
                            }

                            var storeAreaNamesColumnCount = document.getElementById('store-area-names-column-count');
                            var areaNamesColumnCount = storeAreaNamesColumnCount.dataset.areaNamesColumnCount;
                            var selectedDictionary = ui.getSelectedDictionary();
                            var selectedDictionaryIds = ui.getSelectedDictionaryIds(true);
                            var columns = [];

                            Array.prototype.forEach.call(selectedDictionaryIds, function (el, i) {
                                columns.push({title: el, data: i});
                            });
                            columns.push({title: "TOTAL", data: "total_count"});

                            var columnCount = selectedDictionaryIds.length + 1;
                            ui.attachFooterHeader(columnCount, "table-responsive");

                            selectedDictionaryIds = ui.getSelectedDictionaryIds(false);

                            $('#table-responsive')
                                    .on('xhr.dt', function (e, settings, json, xhr) {
                                    })
                                    .on('error.dt', function (e, settings, techNote, message) {
                                        var strLogin = '<title>CSWeb: Login</title>';
                                        if (settings && settings.jqXHR && settings.jqXHR.responseText && settings.jqXHR.responseText.includes(strLogin)) {
                                            // TODO: Hack to catch expired token
                                            window.location.href = "{{ path('logout') }}";
                                            return;
                                        }
                                        console.log('An error has been reported by DataTables: ', message);
                                    })
                                    .DataTable({
                                        serverSide: true,
                                        processing: true,
                                        searching: true,
                                        paging: true,
                                        pageLength: 10,
                                        order: [[0, "asc"]],
                                        columns: columns,
                                        ajax: {
                                            url: "{{ url('syncReportJson') }}",
                                            data: {
                                                areaNamesColumnCount: areaNamesColumnCount,
                                                dictionary: selectedDictionary,
                                                dictionaryIds: selectedDictionaryIds
                                            }
                                        },

                                        initComplete: function () {
                                            // Create column filter dropdown
                                            this.api().columns().every(function () {
                                                var column = this;
                                                var select = $('<select><option value=""></option></select>')
                                                        .appendTo($(column.footer()).empty())
                                                        .on('change', function () {
                                                            var val = $.fn.dataTable.util.escapeRegex(
                                                                    $(this).val()
                                                                    );

                                                            column
                                                                    .search(val, false, false)
                                                                    .draw();
                                                        });

                                                column.data().unique().sort().each(function (value, index) {
                                                    select.append('<option value="' + value + '">' + value + '</option>');
                                                });
                                            });
                                        },
                                    },
                                            );
                        }
                    }

        </script>

        <div id="mainSpinner" class="spinner"><!-- Place at bottom of page --></div>

    </body>

</html>
